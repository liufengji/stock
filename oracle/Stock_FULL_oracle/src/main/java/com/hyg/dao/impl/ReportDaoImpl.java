/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.hyg.dao.impl;


import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import com.hyg.dao.ReportDaoI;
import com.hyg.util.DBUtil;

public class ReportDaoImpl extends DBUtil implements ReportDaoI
{
	@Override
	public List<Map<String, Object>> findMonthInstock(String sql, Object[] param) throws SQLException {
		// TODO Auto-generated method stub
		Connection conn = this.getConnection();
		String instockSql = " SELECT (SELECT P.STOCKNAME FROM K_STOCK P WHERE P.ID = A.STOCKID) AS STOCKNAME, "
				+ "	A.PRODUCTNO AS PRODUCTNO,A.PRODUCTNAME AS PRODUCTNAME,A.PRODUCTSTANDARD AS PRODUCTSTANDARD, "
				+ " NVL(M.PRODUCTNUM,0) AS INNUM "
				+ " FROM K_INVENTORY A, "
				+ " (SELECT S.STOCKID AS STOCKID, "
				+ " K.PRODUCTNO AS PRODUCTNO, "
				+ " K.PRODUCTNAME AS PRODUCTNAME, "
				+ " K.PRODUCTSTANDARD AS PRODUCTSTANDARD, "
				+ " SUM(K.PRODUCTNUM) AS PRODUCTNUM "
				+ " FROM  K_INSTOCK S, K_INSTOCK_DETAIL K  "
				+ " WHERE S.ID = K.INSTOCKID "
				+ sql
				+ " GROUP BY S.STOCKID, "
				+ "     K.PRODUCTNO, "
				+ "     K.PRODUCTNAME, "
				+ "     K.PRODUCTSTANDARD "
				+ " ORDER BY S.STOCKID,K.PRODUCTNO) M "
				+ " WHERE A.STOCKID = M.STOCKID(+) "
				+ " AND A.PRODUCTNO = M.PRODUCTNO(+) ";
		List<Map<String, Object>> resultList = this.executeQuery(conn, instockSql, param);
		this.closeConnection(conn);
		return resultList;
	}
	@Override
	public List<Map<String, Object>> findMonthOutstock(String sql,
			Object[] param) throws SQLException {
		// TODO Auto-generated method stub
		Connection conn = this.getConnection();
		String outstockSql =  " SELECT (SELECT P.STOCKNAME FROM K_STOCK P WHERE P.ID = A.STOCKID) AS STOCKNAME, "
				+ "	A.PRODUCTNO AS PRODUCTNO,A.PRODUCTNAME AS PRODUCTNAME,A.PRODUCTSTANDARD AS PRODUCTSTANDARD, "
				+ " NVL(M.PRODUCTNUM,0) AS OUTNUM "
				+ " FROM K_INVENTORY A, "
				+ " (SELECT S.STOCKID AS STOCKID, "
				+ " K.PRODUCTNO AS PRODUCTNO, "
				+ " K.PRODUCTNAME AS PRODUCTNAME, "
				+ " K.PRODUCTSTANDARD AS PRODUCTSTANDARD, "
				+ " SUM(K.PRODUCTNUM) AS PRODUCTNUM "
				+ " FROM  K_OUTSTOCK S, K_OUTSTOCK_DETAIL K  "
				+ " WHERE S.ID = K.OUTSTOCKID "
				+ sql
				+ " GROUP BY S.STOCKID, "
				+ "     K.PRODUCTNO, "
				+ "     K.PRODUCTNAME, "
				+ "     K.PRODUCTSTANDARD "
				+ " ORDER BY S.STOCKID,K.PRODUCTNO) M "
				+ " WHERE A.STOCKID = M.STOCKID(+) "
				+ " AND A.PRODUCTNO = M.PRODUCTNO(+) ";
		List<Map<String, Object>> resultList = this.executeQuery(conn, outstockSql, param);
		this.closeConnection(conn);
		return resultList;
	}


}
